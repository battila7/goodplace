---
import Markdown from "../util/markdown"
import "../styles/global.css";

import Header from "../components/Header.astro"
import Footer from "../components/Footer.astro"
import Hero from '../components/home/Hero.astro'
import { Picture } from "astro:assets";
import { chunksAndIndices } from "../util/arrays";


import {greetingTitle, greetingSubtitle, banners, servicesTitle,
    servicesContent, services, blocks, experiencesTitle, experiencesContent, experiences,
    seoTitle, seoContent, gallery
} from "../content/fixed-pages/home.json"
import Assets from "../util/assets";


for (const service of services) {
    service.iconSvg = await Assets.getSvg(service.icon, {
        addClasses: 'size-10 shrink-0',
        strokeWidth: 1,
    })
}

for (const experience of experiences) {
    experience.iconSvg = await Assets.getSvg(experience.icon, {
        addClasses: 'size-10 shrink-0',
        strokeWidth: 1,
    })
}


const IMAGE_COLUMNS = 3

const images = gallery.map(image => Assets.getImage(image))

for (const image of images) {
    await image;
}

const imageColumns = chunksAndIndices(images, IMAGE_COLUMNS)

function imageClasses(index: number) {
    return `img-${index} h-auto max-w-full rounded-lg transition-transform duration-300 transform group-hover:scale-125`
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site);
const socialImageURL = new URL('/apartman/gpa-main.webp', Astro.url);
---

<!doctype html>
<html lang="hu">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">

  <title>Good Place Partman Nyírbátor</title>
  <meta property="og:title" content="Good Place Apartman Nyírbátor">
  <meta property="og:type" content="website">
  <meta property="og:description" content={greetingTitle}>
  <meta name="description" content={greetingTitle}>
  <meta property="og:url" content={canonicalURL}>
  <meta property="og:image" content={socialImageURL}>
    <script>import "preline/dist/preline.js";</script>

    <script defer src="https://cdn.jsdelivr.net/npm/@alpinejs/focus@3.x.x/dist/cdn.min.js"></script>
        <script>
            document.addEventListener("alpine:init", () => {        
                Alpine.data("gallery", () => ({
                    imageGalleryOpened: false,
                    imageGalleryActiveUrl: null,
                    imageCount: 0,
                    imageGalleryActiveIndex: 0,
                    imageGalleryEl: null,


                    init() {
                        this.imageGalleryEl = this.$el
                        const imageTags = this.imageGalleryEl.querySelectorAll('img')
                        this.imageCount = imageTags.length
                    },

                    imageGalleryOpen(el) {
                        const imageElement = el.querySelector('img');

                        this.imageGalleryActiveUrl = imageElement.src;
                        this.imageGalleryOpened = true;

                        const imageClasses = imageElement.className;
                        console.log(imageClasses)
                        const activeIndexPlusCruft = imageClasses.split('img-')[1]
                        const activeIndexAsText = activeIndexPlusCruft.split(' ')[0]
                        this.imageGalleryActiveIndex = parseInt(activeIndexAsText);
                    },
                    imageGalleryClose() {
                        this.imageGalleryOpened = false;
                        setTimeout(() => this.imageGalleryActiveUrl = null, 300);
                    },
                    imageGalleryPrev() {
                        if (this.hasPreviousImage) {
                            this.imageGalleryActiveIndex--;
                            this.imageGalleryActiveUrl = this.srcForIndex(this.imageGalleryActiveIndex);
                        }
                    },
                    imageGalleryNext() {
                        if (this.hasNextImage) {
                            this.imageGalleryActiveIndex++;
                            this.imageGalleryActiveUrl = this.srcForIndex(this.imageGalleryActiveIndex);
                        }
                    },
                    get hasPreviousImage() {
                        return this.imageGalleryActiveIndex > 0;
                    },
                    get hasNextImage() {
                        return this.imageGalleryActiveIndex < this.imageCount - 1;
                    },
                    srcForIndex(index: number): string {
                        return this.imageGalleryEl.querySelector(`img.img-${index}`).src
                    }
                }))
            })
        </script>
</head>
<body>
	<Header href="/" />
    <main id="content" class="">
        <div class="w-full h-[56px]"></div>

        <Hero title={greetingTitle} subtitle={greetingSubtitle} />

        {banners.map((banner) => (
            <section class="w-full py-10 bg-gray-50 min-h-[50vh]">
                <div class="px-5 md:px-0 md:w-2/3 h-full mx-auto grid grid-cols-1 md:grid-cols-2 gap-5">
                    <div class="flex flex-col md:pt-15">
                        <h2 class="text-green-700 text-2xl md:text-3xl font-semibold italic playfair-display">{banner.title}</h2>
                    </div>
                    <div class="flex flex-col gap-y-5">
                        <div set:html={Markdown.render(banner.content)} class="prose lg:prose-lg text-justify text-gray-800">
                        </div>
                        <div>
                            <a href={banner.ctaButtonLink} class="py-2 px-3 text-md font-semibold shadow-sm inline-flex items-center gap-x-2 rounded-lg border border-transparent bg-green-700 text-white font-semibold hover:bg-green-800 disabled:opacity-50 disabled:pointer-events-none focus:outline-none focus:ring-2 focus:ring-blue-500">
                                {banner.ctaButtonLabel}
                            </a>    
                        </div>
                    </div>         
                </div>
            </section>
        ))}

        <section id="services" class="w-full py-10 bg-green-50 min-h-[50vh] space-y-10">
            <div class="px-5 md:px-0 md:w-2/3 h-full mx-auto grid grid-cols-1 md:grid-cols-2 gap-5">
                <div class="flex flex-col">
                    <h2 class="text-green-700 text-2xl md:text-3xl font-semibold italic playfair-display">{servicesTitle}</h2>
                </div>
                <div class="flex flex-col gap-y-5">
                    <div set:html={Markdown.render(servicesContent)} class="prose lg:prose-lg text-justify text-gray-800">
                    </div>
                </div>         
            </div>
            <div class="px-5 md:px-0 w-full md:w-2/3 mx-auto grid grid-cols-2 md:grid-cols-4 gap-5">
                {services.map(service => (
                    <div>
                    <div class="bg-white border border-gray-200 shadow-sm rounded-lg">
                        <div class="p-4 h-full w-full flex flex-col gap-y-2 items-center justify-center">
                            <div set:html={service.iconSvg} class="text-green-700">
                            </div>
                            <h3 class="text-center text-md font-semibold md:text-xl text-gray-800">
                                {service.title}
                            </h3>
                            <div class="text-justify text-gray-800 text-xs md:text-sm">
                                {service.description}
                            </div>
                        </div>
                    </div>
                </div>    
                ))}
            </div>
        </section>

        {blocks.map((block) => (
            <section class="w-full py-10 bg-gray-50 min-h-[50vh]">
                <div class="px-5 md:px-0 md:w-2/3 h-full mx-auto grid grid-cols-1 md:grid-cols-2 gap-5">
                    <div class="flex flex-col md:pt-15">
                        <h2 class="text-green-700 text-2xl md:text-3xl font-semibold italic playfair-display">{block.title}</h2>
                    </div>
                    <div class="flex flex-col gap-y-5">
                        <div set:html={Markdown.render(block.content)} class="prose lg:prose-lg text-justify text-gray-800">
                        </div>
                        <div>
                            <a href={block.ctaButtonLink} class="py-2 px-3 text-md font-semibold shadow-sm inline-flex items-center gap-x-2 rounded-lg border border-transparent bg-green-700 text-white font-semibold hover:bg-green-800 disabled:opacity-50 disabled:pointer-events-none focus:outline-none focus:ring-2 focus:ring-blue-500">
                                {block.ctaButtonLabel}
                            </a>    
                        </div>
                    </div>         
                </div>
            </section>
        ))}

        <section class="w-full py-10 bg-green-50 min-h-[50vh] space-y-10">
            <div class="px-5 md:px-0 md:w-2/3 h-full mx-auto grid grid-cols-1 md:grid-cols-2 gap-5">
                <div class="flex flex-col">
                    <h2 class="text-green-700 text-2xl md:text-3xl font-semibold italic playfair-display">{experiencesTitle}</h2>
                </div>
                <div class="flex flex-col gap-y-5">
                    <div set:html={Markdown.render(experiencesContent)} class="prose lg:prose-lg text-justify text-gray-800">
                    </div>
                </div>         
            </div>
            <div class="px-5 md:px-0 w-full md:w-2/3 mx-auto grid grid-cols-1 md:grid-cols-2 gap-5">
                {experiences.map(experience => (
                    <div>
                    <div class="bg-white border border-gray-200 shadow-sm rounded-lg">
                        <div class="p-6 h-full w-full flex flex-col gap-y-2">
                            <div class="flex flex-row gap-x-5 items-center">
                                <div set:html={experience.iconSvg} class="text-green-700">
                                </div>
                                <h3 class="text-md font-semibold md:text-xl text-gray-800">
                                    {experience.title}
                                </h3>
                            </div>
                            <div set:html={Markdown.render(experience.description)} class="text-justify text-gray-800 prose">
                            </div>
                        </div>
                    </div>
                </div>    
                ))}
            </div>
        </section>
        <section class="w-full py-10 bg-gray-50 min-h-[50vh] space-y-10">
            <div class="px-5 md:px-0 md:w-2/3 h-full mx-auto grid grid-cols-1 md:grid-cols-2 gap-5">
                <div class="flex flex-col">
                    <h2 class="text-green-700 text-2xl md:text-3xl font-semibold italic playfair-display">{seoTitle}</h2>
                </div>
                <div class="flex flex-col gap-y-5">
                    <div set:html={Markdown.render(seoContent)} class="prose lg:prose-lg text-justify text-gray-800">
                    </div>
                </div>         
            </div>
        </section>

        <section class="w-full py-5 md:py-10 bg-gray-50">
            <div x-data="gallery" class="w-full px-5 md:px-0 md:w-2/3 mx-auto">
                <div class="grid grid-cols-3 gap-2 md:gap-4">
                    {imageColumns.map(imageColumn => (
                        <div class="grid content-start gap-2 md:gap-4">
                            {imageColumn.map(image => (
                                <div x-on:click="imageGalleryOpen($el)" data-src={image.item.src} class="tile relative overflow-hidden group cursor-zoom-in">
                                    <Picture
                                        src={image.item}
                                        formats={["webp"]},
                                        alt="",
                                        class={imageClasses(image.index)}
                                    />
                                </div>
                            ))}
                        </div>
                    ))}
                </div>
                <template x-teleport="body">
                    <div 
                        x-show="imageGalleryOpened" 
                        x-transition:enter="transition ease-in-out duration-300" 
                        x-transition:enter-start="opacity-0" 
                        x-transition:leave="transition ease-in-in duration-300" 
                        x-transition:leave-end="opacity-0" 
                        @keydown.window.escape="imageGalleryClose" 
                        x-trap.inert.noscroll="imageGalleryOpened"
                        class="fixed inset-0 z-[99] flex items-center justify-center bg-black bg-opacity-50 select-none" x-cloak>
                        <div class="relative flex items-center justify-center w-11/12 xl:w-4/5 h-11/12"> 
                            <div :class="{ 'opacity-0': !hasPreviousImage }" class="text-white cursor-pointer" @click="imageGalleryPrev">
                                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-chevron-left"><path d="m15 18-6-6 6-6"/></svg>
                            </div>
                            <img 
                                @click="imageGalleryClose" 
                                x-show="imageGalleryOpened" 
                                x-transition:enter="transition ease-in-out duration-300" 
                                x-transition:enter-start="opacity-0 transform scale-50" 
                                x-transition:leave="transition ease-in-in duration-300" 
                                x-transition:leave-end="opacity-0 transform scale-50" 
                                class="object-contain object-center w-full py-5 h-[100vh] select-none cursor-zoom-out" :src="imageGalleryActiveUrl" alt="" style="display: none;">
                            <div :class="{ 'opacity-0': !hasNextImage }" class="text-white cursor-pointer" @click="imageGalleryNext">
                                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-chevron-right"><path d="m9 18 6-6-6-6"/></svg>
                            </div>
                        </div>
                    </div>
                </template>
            </div>
        </section>
    </main>    
    <Footer />
</body>
</html>
